/*eslint-disable*/
import sha1 from 'sha1';
import Queue from 'bull';
import { ObjectId } from 'mongodb';
import dbClient from '../utils/db';
import userUtils from '../utils/user';


const userQueue = new Queue('userQueue');

class UsersController {
  /**
   * Creates a new user with an email and password
   * 
   * To create a user, you must specify an email and a password
   * If the email is missing, return an error Missing email with a status code 400
   * If the password is missing, return an error Missing password with a status code 400
   * If the email already exists in DB, return an error Already exist with a status code 400
   * The password must be stored after being hashed in SHA1
   * The endpoint is returning the new user with only the email and the id
   * (auto generated by MongoDB) with a status code 201
   * The new user must be saved in the collection users:
   * email: same as the value received
   * password: SHA1 value of the value received
   */
  static async postNew(request, response) {
    const { email, password } = request.body;

    // Check if email is provided
    if (!email) {
      return response.status(400).json({ error: 'Missing email' });
    }

    // Check if password is provided
    if (!password) {
      return response.status(400).json({ error: 'Missing password' });
    }

    // Check if the email already exists in the database
    const userExists = await dbClient.db.collection('users').findOne({ email });
    if (userExists) {
      return response.status(400).json({ error: 'Already exist' });
    }

    // Hash the password using SHA1
    const hashedPassword = sha1(password);

    // Insert the new user into the database
    let insertionResult;
    try {
      insertionResult = await dbClient.db.collection('users').insertOne({
      email,
      password: hashedPassword,
      });

      // Return the new user with the email and id only
      return response.status(201).json({ id: insertionResult.insertedId, email });
    }

  /**
   * should retrieve the user base on the token used:
   * 
   * Retrieve the user based on the token
   * If not found, return an error Unauthorized with a status code 401
   * Otherwise, return the user object (email and id only)
   */
  static async getMe(request, response) {
    const { userId } = await userUtils.getUserIdAndKey(request);

    const user = await userUtils.getUser({
      _id: ObjectId(userId),
    });

    if (!user) {
      return response.status(401).json({ error: 'Unauthorized' });
    }

    const userInfo = { id: user._id, ...user };
    delete userInfo._id;
    delete userInfo.password;

    // Return the user's details
    return response.status(200).json(userInfo);
  }
}

export default UsersController;